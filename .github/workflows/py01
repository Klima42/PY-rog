import networkx as nx
import matplotlib.pyplot as plt
import random

def réseau_aléatoire(n):
    G = nx.Graph()
    for i in range(n):
        G.add_node(i)
    for i in range(n):
        for j in range(i+1,n):
            if random.random() < 0.5:
                G.add_edge(i,j)
    return G

def simuler_RIP(G, source, n):
    distances = [-1 for i in range(n)]
    distances[source] = 0
    for i in range(n-1):
        for u in G.nodes():
            for v in G[u]:
                if distances[v] == -1:
                    distances[v] = distances[u] + 1
    return distances

def simuler_DJKSTRA(G, source, n):
    distances = [float('inf') for i in range(n)]
    distances[source] = 0
    Q = set(G.nodes())
    while Q:
        u = min(Q, key=lambda x: distances[x])
        Q.remove(u)
        for v in G[u]:
            alt = distances[u] + 1
            if alt < distances[v]:
                distances[v] = alt
        return distances

def visualiser_réseau(G):
    nx.draw(G, with_labels=True)
    plt.show()

def main():
    n = int(input("Entrez le nombre de nœuds dans le réseau : "))
    source = int(input("Entrez le nœud source : "))
    choix = int(input("Entrez 1 pour créer un réseau aléatoire, 2 pour simuler RIP, ou 3 pour simuler DJKSTRA : "))
    if choix == 1:
        G = réseau_aléatoire(n)
        visualiser_réseau(G)
    elif choix == 2:
        G = réseau_aléatoire(n)
        distances = simuler_RIP(G, source, n)
        visualiser_réseau(G)
        print("Distances depuis le nœud source : ", distances)
    elif choix == 3:
        G = réseau_aléatoire(n)
        distances = simuler_DJKSTRA(G, source, n)
        visualiser_réseau(G)
        print("Distances depuis le nœud source : ", distances)


main()
