import heapq
import networkx as nx
import matplotlib.pyplot as plt
import random

def construct_random_graph(num_nodes):
    graph = nx.Graph()
    for i in range(num_nodes):
        graph.add_node(i)
    for i in range(num_nodes):
        for j in range(i+1, num_nodes):
            if random.random() < 0.5: # probability of adding an edge between nodes i and j
                graph.add_edge(i, j, weight=1)
    return graph

def dijkstra(algorithm='rip'):
    num_nodes = int(input("Enter the number of nodes in the network (3-20): "))
    if num_nodes < 3 or num_nodes > 20:
        raise ValueError("Invalid number of nodes. Number of nodes should be between 3 and 20")
    else:
        graph = construct_random_graph(num_nodes)
        start = random.choice(list(graph.nodes()))
        print(f"Random starting node: {start}")

def construct_graph(num_nodes):
    graph = nx.Graph()
    for i in range(num_nodes):
        graph.add_node(i)
    for i in range(num_nodes):
        for j in range(i+1, num_nodes):
            graph.add_edge(i, j, weight=1) # corrected line
    return graph

def dijkstra(algorithm='rip'):
    num_nodes = int(input("Enter the number of nodes in the network (3-20): "))
    if num_nodes < 3 or num_nodes > 20:
        raise ValueError("Invalid number of nodes. Number of nodes should be between 3 and 20")
    else:
        graph = construct_graph(num_nodes)
        start = int(input("Enter the starting node: "))
        if start not in graph:
            raise ValueError(f"Invalid starting node: {start}")
        if algorithm == 'dijkstra':
            queue = [(0, start)]
            distances = {node: float('inf') for node in graph.nodes()}
            distances[start] = 0
            previous = {node: None for node in graph.nodes()}
            while queue:
                current_distance, current = heapq.heappop(queue)
                if current in distances:
                    continue
                distances[current] = current_distance
                for neighbor, weight in graph[current].items():
                    distance = current_distance + weight
                    if distance < distances[neighbor]:
                        distances[neighbor] = distance
                        previous[neighbor] = current
                        heapq.heappush(queue, (distance, neighbor))
            nx.draw(graph, with_labels=True)
            plt.show()
            return distances, previous
        elif algorithm == 'rip':
            distances = {node: float('inf') for node in graph.nodes()}
            distances[start] = 0
            previous = {node: None for node in graph.nodes()}
            for _ in range(len(graph) - 1):
                for node in graph:
                    for neighbor in graph[node]:
                        weight = graph[node][neighbor]['weight']
                        if distances[node] + weight < distances[neighbor]:
                            distances[neighbor] = distances[node] + weight
                            previous[neighbor] = node
            nx.draw(graph, with_labels=True)
            plt.show()
            return distances, previous
        else:
            raise ValueError(f'Invalid algorithm: {algorithm}')

algorithm = input("Enter the algorithm you want to use (Dijkstra or RIP): ").lower()
distances, previous = dijkstra(algorithm)
